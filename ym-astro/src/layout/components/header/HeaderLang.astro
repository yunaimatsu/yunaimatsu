<!-- To add multilingual functionality to your website using Astro, you'll need to set up a way to manage different languages and provide a way for users to switch between them. Here’s a step-by-step guide to add a language dropdown in the header:

### 1. Structure Your Project

First, organize your project to handle multiple languages. A common approach is to have separate folders or files for each language’s content.

Example directory structure:

```
src/
  pages/
    index.en.md
    index.es.md
    about.en.md
    about.es.md
  components/
    Header.astro
  i18n/
    en.json
    es.json
```

### 2. Define Language Data

Create JSON files for each language in the `src/i18n/` directory. These files will contain translations for your site.

**`src/i18n/en.json`**
```json
{
  "home": "Home",
  "about": "About",
  "language": "Language"
}
```

**`src/i18n/es.json`**
```json
{
  "home": "Inicio",
  "about": "Acerca de",
  "language": "Idioma"
}
```

### 3. Create a Language Switcher Component

In the `src/components/` directory, create a `Header.astro` component that includes a language dropdown.

**`src/components/Header.astro`**
```astro
---
import { useState } from 'react';
import { Astro } from 'astro/types';

const languages = [
  { code: 'en', label: 'English' },
  { code: 'es', label: 'Español' }
];

const { pathname } = Astro.request.url;
const [currentLang, setCurrentLang] = useState('en');

const handleChange = (event) => {
  const selectedLang = event.target.value;
  setCurrentLang(selectedLang);
  window.location.href = pathname.replace(`/${currentLang}/`, `/${selectedLang}/`);
};

---
<header>
  <nav>
    <a href="/">Home</a>
    <a href="/about">About</a>
    <select onChange={handleChange} value={currentLang}>
      {languages.map(lang => (
        <option key={lang.code} value={lang.code}>
          {lang.label}
        </option>
      ))}
    </select>
  </nav>
</header>
```

### 4. Modify Your Layout to Include the Header

Make sure your layout or main template includes the `Header` component.

**`src/layouts/BaseLayout.astro`**
```astro
---
import Header from '../components/Header.astro';
import { Astro } from 'astro/types';

const { url } = Astro.request;
const currentLang = url.pathname.split('/')[1] || 'en';
const translations = await import(`../i18n/${currentLang}.json`);
---
<!DOCTYPE html>
<html lang={currentLang}>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{translations.home}</title>
</head>
<body>
  <Header />
  <main>
    <slot />
  </main>
</body>
</html>
```

### 5. Create Markdown Files for Each Language

Ensure that each content file is available in multiple languages, and name them appropriately.

**`src/pages/index.en.md`**
```markdown
---
title: "Home"
layout: "../layouts/BaseLayout.astro"
---

Welcome to the homepage!
```

**`src/pages/index.es.md`**
```markdown
---
title: "Inicio"
layout: "../layouts/BaseLayout.astro"
---

¡Bienvenido a la página de inicio!
```

### 6. Test Your Implementation

Run your Astro development server and navigate to your site. Check the language dropdown in the header and verify that it switches languages and updates the content accordingly.

By following these steps, you should be able to add a language switcher to your Astro site and manage multilingual content effectively. Let me know if you need more details or have specific requirements! -->